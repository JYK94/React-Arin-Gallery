{"version":3,"sources":["components/user/SignUp.js","components/BbsInsert.js","components/BbsInfo.js","components/BbsImg.js","components/MainForm.js","components/ImageList.js","App.js","serviceWorker.js","index.js"],"names":["SignUp","React","Component","constructor","props","super","this","state","userId","userName","password","email","handleFormSubmit","bind","handleValueChange","doSignUp","e","preventDefault","then","response","console","log","data","handleFileChange","setState","file","target","files","fileName","value","nextState","name","formData","FormData","append","post","headers","render","createElement","onSubmit","type","placeholder","onChange","BbsInsert","selectedFile","handleFileInput","handlePost","axios","res","alert","catch","err","className","accept","onClick","BbsInfo","bbsNo","seq","title","content","src","width","height","alt","likeCnt","BbsImg","nSrc","MainForm","ImageList","_ref","images","map","item","key","BBS_NO","SEQ","USER_NM","TITLE","CONTENT","LIKE_CNT","FILE_PATH","App","arguments","page","loading","hasMore","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","loadMoreImages","callApi","async","limit","length","undefined","fetch","concat","body","json","newImages","prevState","error","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.050ee6c7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport { post } from 'axios';\r\n\r\nclass SignUp extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n            userId: '',\r\n\r\n            userName: '',\r\n\r\n            password: '',\r\n\r\n            email: ''\r\n\r\n        }\r\n\r\n        // 저장 행위\r\n        this.handleFormSubmit = this.handleFormSubmit.bind(this)\r\n        // 값 변경 시 이벤트\r\n        this.handleValueChange = this.handleValueChange.bind(this)\r\n        // 실제 저장\r\n        this.doSignUp = this.doSignUp.bind(this)\r\n\r\n    }\r\n\r\n    handleFormSubmit(e) {       // submit\r\n\r\n        e.preventDefault()\r\n\r\n        this.doSignUp()\r\n\r\n        .then((response) => {\r\n\r\n        console.log(response.data);\r\n\r\n        })\r\n\r\n    }\r\n\r\n    handleFileChange(e) {       // file\r\n\r\n        this.setState({\r\n\r\n        file: e.target.files[0],\r\n\r\n        fileName: e.target.value\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n    handleValueChange(e) {      // valueChange Event\r\n        const rName = e.target.name;\r\n\r\n        // const passStyle = rName === \"password\"\r\n        //                     ? e.target.value < 4 ? \"red\" : \"green\"\r\n        //                     : \"\" ;\r\n        // password Check\r\n        // const passStyle2 = rName === \"password2\"\r\n        //                     ? e.target.value !== this.state.password ? \"red\" : \"green\"\r\n        //                     : \"\" ;\r\n// console.log('passStyle2 : ' + passStyle2);\r\n        let nextState = {};\r\n        nextState[rName] = e.target.value;\r\n        this.setState(nextState);\r\n    }\r\n\r\n    doSignUp(){\r\n        const url = '/api/userInfo';\r\n        const formData = new FormData();\r\n\r\n        formData.append('userId',     this.state.userId)\r\n        formData.append('userName',   this.state.userName)\r\n        formData.append('email',      this.state.email)\r\n        formData.append('password',   this.state.password)\r\n        const config = {\r\n            headers: {\r\n                'content-type': 'multipart/form-data'\r\n            }\r\n        }\r\n\r\n        return post(url, formData, config)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleFormSubmit}>\r\n                <h1>Sign Up</h1>\r\n                <input type=\"text\" name=\"userId\" placeholder=\"User ID\" value={this.state.userId} onChange={this.handleValueChange} /><br/>\r\n                <input type=\"password\" name=\"password\" placeholder=\"Password(4~12)\" value={this.state.password} onChange={this.handleValueChange} /><br/>\r\n                <input type=\"password\" name=\"password2\" placeholder=\"Confirm Password\" onChange={this.handleValueChange} /><br/>\r\n                <input type=\"text\" name=\"userName\" placeholder=\"User Name\" value={this.state.userName} onChange={this.handleValueChange} /><br/>\r\n                <input type=\"text\" name=\"email\" placeholder=\"E-mail\" value={this.state.email} onChange={this.handleValueChange} /><br/>\r\n                <button type=\"submit\">signUp</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SignUp","import axios from 'axios';\r\nimport React, { Component } from 'react'\r\nimport '../App.css';\r\n\r\nclass BbsInsert extends Component {\r\n    \r\n    constructor(props) {        // constructor 추가\r\n        super(props);\r\n        this.state = {          // 파일 객체를 담을 state\r\n            selectedFile: null,\r\n        }\r\n    }\r\n\r\n    handleFileInput(e) {        // 파일 input 클릭 시 이벤트\r\n        this.setState({\r\n            selectedFile : e.target.files[0],\r\n        })\r\n    }\r\n\r\n    handlePost() {\r\n        // file FormData 생성하여 API서버로 POST 방식으로 요청\r\n        const formData = new FormData();\r\n        formData.append('file', this.state.selectedFile);\r\n\r\n        return axios.post(\"/api/upload\", formData).then(res => {\r\n            alert('업로드 성공');\r\n        }).catch(err => {\r\n            alert('업로드 실패');\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"bbsInfoDiv\">\r\n\r\n                <h2>BBS Insert</h2>\r\n                <form>\r\n                    <input type=\"hidden\" name=\"BBS_NO\" />\r\n                    <input type=\"hidden\" name=\"SEQ\" />\r\n                    <input type=\"hidden\" name=\"WRT_USER_ID\" />\r\n                TITLE : <input type=\"text\" name=\"TITLE\" /> <br/>\r\n                CONTENT : <input type=\"text\" name=\"CONTENT\" /> <br/>\r\n                {/* 첨부파일 입력 */}\r\n                <input type=\"file\" name=\"file\" onChange={null}/>\r\n                <br/>\r\n                <button type=\"button\" accept=\"image/gif, image/jpeg, image/png\" onClick={null}>저장</button>\r\n                <button type=\"button\" onClick={null}>취소</button>\r\n                </form>\r\n            </div>\r\n        )\r\n   }\r\n}\r\n\r\nexport default BbsInsert;","import React, { Component } from 'react'\r\nimport '../App.css';\r\n\r\n\r\n\r\nclass BbsInfo extends Component {\r\n    render () {\r\n        return (\r\n            <div className=\"bbsInfoDiv\">\r\n                <p>WRITER : {this.props.name}</p>\r\n                <p>BbsNo. : {this.props.bbsNo}-{this.props.seq}</p>\r\n                <p>TITLE  : {this.props.title}</p>\r\n                <p>CONTENT: {this.props.content}</p>\r\n                <p>\r\n                    <img src=\"https://pic.sopili.net/pub/emoji/twitter/2/72x72/2764.png\" width='12' height='12' alt=\"heart\" /> \r\n                    &nbsp;{this.props.likeCnt}\r\n                </p>\r\n            </div>\r\n        )\r\n   }\r\n} \r\n\r\nexport default BbsInfo;","import React, { Component } from 'react'\r\nimport '../App.css';\r\n\r\nclass BbsImg extends Component {\r\n    render () {\r\n        return (\r\n            <div className=\"bbsImgDiv\">\r\n                <img className=\"bbsImage\" src={this.props.nSrc} alt=\"profile\" />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BbsImg;","import React, { Component } from 'react'\r\nimport '../App.css';\r\nimport BbsInfo from './BbsInfo';\r\nimport BbsImg from './BbsImg';\r\n\r\nclass MainForm extends Component {\r\n    render () {\r\n        return (\r\n            <div className='imgItem'>\r\n                <BbsImg nSrc={this.props.nSrc} />\r\n                <BbsInfo \r\n                    name={this.props.name}\r\n                    bbsNo={this.props.bbsNo}\r\n                    content={this.props.content}\r\n                    seq={this.props.seq}\r\n                    likeCnt={this.props.likeCnt}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainForm;","import React from 'react';\r\nimport MainForm from './MainForm';\r\nimport '../App.css'; // Or a specific CSS file for ImageList\r\n\r\nconst ImageList = ({ images }) => {\r\n  return (\r\n    <div className=\"image-list-container\"> {/* Add a class for styling */}\r\n      {images.map(item => (\r\n        <MainForm\r\n          key={item.BBS_NO + '-' + item.SEQ} // Create a unique key\r\n          name={item.USER_NM}\r\n          bbsNo={item.BBS_NO}\r\n          title={item.TITLE}\r\n          content={item.CONTENT}\r\n          seq={item.SEQ}\r\n          likeCnt={item.LIKE_CNT}\r\n          nSrc={item.FILE_PATH}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageList;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\n// import MainForm from './components/MainForm' // Will be replaced by ImageList\r\nimport SignUp from './components/user/SignUp.js';\r\nimport BbsInsert from './components/BbsInsert.js';\r\nimport ImageList from './components/ImageList'; // Import ImageList\r\n\r\nclass App extends Component {\r\n  state = {\r\n    images: [],\r\n    page: 1,\r\n    loading: false,\r\n    hasMore: true,\r\n    // bbsInfo: '' // Remove this\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadMoreImages();\r\n    window.addEventListener('scroll', this.handleScroll);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('scroll', this.handleScroll);\r\n  }\r\n\r\n  handleScroll = () => {\r\n    // Check if scrolled to bottom\r\n    if (\r\n      window.innerHeight + document.documentElement.scrollTop >= document.documentElement.offsetHeight - 100 && // Add a small threshold\r\n      !this.state.loading &&\r\n      this.state.hasMore\r\n    ) {\r\n      this.loadMoreImages();\r\n    }\r\n  };\r\n\r\n  // node.js 비동기식 호출\r\n  callApi = async (page, limit = 10) => { // Added limit, default to 10\r\n    const response = await fetch(`/api/bbsInfo?page=${page}&limit=${limit}`);\r\n    const body = await response.json();\r\n    return body;\r\n  };\r\n\r\n  loadMoreImages = async () => {\r\n    if (this.state.loading || !this.state.hasMore) return;\r\n\r\n    this.setState({ loading: true });\r\n    try {\r\n      const newImages = await this.callApi(this.state.page);\r\n      if (newImages.length === 0) {\r\n        this.setState({ hasMore: false });\r\n      } else {\r\n        this.setState(prevState => ({\r\n          images: [...prevState.images, ...newImages],\r\n          page: prevState.page + 1,\r\n        }));\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Failed to load images\", err);\r\n      // Optionally, handle the error in the UI\r\n    } finally {\r\n      this.setState({ loading: false });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { images, loading, hasMore } = this.state; // Ensure hasMore is destructured if used for messages\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1>Arin Gallery</h1>\r\n        </header>\r\n\r\n        <div className=\"content\">\r\n          <ImageList images={images} /> {/* Use ImageList component */}\r\n          {loading && <p>Loading more images...</p>}\r\n          {!hasMore && <p>No more images to load.</p>}\r\n        </div>\r\n        {/* content Div END */}\r\n        \r\n        <hr/>\r\n\r\n        {/* 회원가입 폼 */}\r\n        <div>\r\n            <SignUp/>\r\n        </div>\r\n        <hr/>\r\n        {/* 게시글 INSERT 폼 */}\r\n        <div>\r\n            <BbsInsert/>\r\n        </div>\r\n\r\n        <hr/>\r\n\r\n        <footer className=\"App-footer\">\r\n            <p>Copyright JYK94 2021.</p>\r\n        </footer>\r\n      </div>\r\n      // App Div END\r\n    );\r\n  } \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}