{"version":3,"sources":["components/ImageList.js","App.js","serviceWorker.js","index.js"],"names":["breakpointColumnsObj","default","1100","700","500","styles","galleryContainer","padding","width","maxWidth","margin","imageWrapper","position","borderRadius","overflow","boxShadow","transition","transform","image","height","display","masonryGrid","marginLeft","masonryColumn","paddingLeft","backgroundClip","ImageList","photos","setPhotos","useState","loading","setLoading","imageFiles","useEffect","async","loadedPhotos","imagesProcessed","length","forEach","filename","img","Image","src","concat","process","onload","push","naturalWidth","naturalHeight","onerror","console","error","fetchImageDimensions","React","createElement","getImageStyle","aspectRatio","_objectSpread","style","Masonry","breakpointCols","className","columnClassName","columnAttrs","map","photo","index","key","alt","App","Component","constructor","arguments","state","componentDidMount","componentWillUnmount","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"oQAIA,MAAMA,EAAuB,CAC3BC,QAAS,EACTC,KAAM,EACNC,IAAK,EACLC,IAAK,GAGDC,EAAS,CACbC,iBAAkB,CAChBC,QAAS,OACTC,MAAO,OACPC,SAAU,SACVC,OAAQ,UAEVC,aAAc,CACZC,SAAU,WACVF,OAAQ,MACRG,aAAc,MACdC,SAAU,SACVC,UAAW,4BACXC,WAAY,6BACZ,UAAW,CACTC,UAAW,cACXF,UAAW,gCAGfG,MAAO,CACLV,MAAO,OACPW,OAAQ,OACRC,QAAS,QACTP,aAAc,OAEhBQ,YAAa,CACXD,QAAS,OACTE,WAAY,OACZd,MAAO,QAETe,cAAe,CACbC,YAAa,MACbC,eAAgB,gBAoGLC,MAhGGA,KAChB,MAAOC,EAAQC,GAAaC,mBAAS,KAC9BC,EAASC,GAAcF,oBAAS,GAGjCG,EAAa,CAAC,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,SA+CnF,GA7CAC,oBAAU,KACqBC,WAC3BH,GAAW,GACX,MAAMI,EAAe,GACrB,IAAIC,EAAkB,EAEtB,GAA0B,IAAtBJ,EAAWK,OAGb,OAFAT,EAAU,SACVG,GAAW,GAIbC,EAAWM,QAAQC,IACjB,MAAMC,EAAM,IAAIC,MACVC,EAAG,GAAAC,OAAMC,sBAAsB,YAAAD,OAAWJ,GAChDC,EAAIE,IAAMA,EAEVF,EAAIK,OAAS,KACXV,EAAaW,KAAK,CAChBJ,IAAKA,EACLlC,MAAOgC,EAAIO,aACX5B,OAAQqB,EAAIQ,gBAEdZ,IACIA,IAAoBJ,EAAWK,SACjCT,EAAUO,GACVJ,GAAW,KAIfS,EAAIS,QAAU,KACZC,QAAQC,MAAM,wBAADR,OAAyBJ,IACtCH,IAEIA,IAAoBJ,EAAWK,SACjCT,EAAUO,GACVJ,GAAW,QAMnBqB,IACC,IAECtB,EACF,OAAOuB,IAAAC,cAAA,SAAG,oCAGZ,GAAsB,IAAlB3B,EAAOU,SAAiBP,EAC1B,OAAOuB,IAAAC,cAAA,SAAG,iDAIZ,MAAMC,EAAgBA,CAAC/C,EAAOW,KAC5B,MAAMqC,EAAchD,EAAQW,EAC5B,OAAAsC,wBAAA,GACKpD,EAAOa,OAAK,IACfsC,YAAaA,KAIjB,OACEH,IAAAC,cAAA,OAAKI,MAAOrD,EAAOC,kBACjB+C,IAAAC,cAACK,IAAO,CACNC,eAAgB5D,EAChB6D,UAAU,eACVC,gBAAgB,sBAChBJ,MAAOrD,EAAOgB,YACd0C,YAAa,CACXF,UAAW,sBACXH,MAAOrD,EAAOkB,gBAGfI,EAAOqC,IAAI,CAACC,EAAOC,IAClBb,IAAAC,cAAA,OAAKa,IAAKD,EAAOR,MAAOrD,EAAOM,cAC7B0C,IAAAC,cAAA,OACEZ,IAAKuB,EAAMvB,IACX0B,IAAG,gBAAAzB,OAAkBuB,EAAQ,GAC7BR,MAAOH,EAAcU,EAAMzD,MAAOyD,EAAM9C,QACxCW,QAAQ,cClItB,MAAMuC,UAAYC,YAAUC,cAAA,SAAAC,WAAA,KAC1BC,MAAQ,GAORC,qBAKAC,wBAUAC,SAEE,OACEvB,IAAAC,cAAA,OAAKO,UAAU,OACbR,IAAAC,cAAA,UAAQO,UAAU,cAChBR,IAAAC,cAAA,UAAI,iBAGND,IAAAC,cAAA,OAAKO,UAAU,WACbR,IAAAC,cAAC5B,EAAS,MAAG,KAiBf2B,IAAAC,cAAA,WAEAD,IAAAC,cAAA,UAAQO,UAAU,cACdR,IAAAC,cAAA,SAAG,4BAQAe,QCpDKQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACPvB,IAAAC,cAACD,IAAM8B,WAAU,KACf9B,IAAAC,cAACe,EAAG,OAENe,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAKC,IACJA,EAAaC,eAEdC,MAAMzC,IACLD,QAAQC,MAAMA,EAAM0C,a","file":"static/js/main.92324e0c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Masonry from 'react-masonry-css';\r\nimport '../App.css';\r\n\r\nconst breakpointColumnsObj = {\r\n  default: 4,\r\n  1100: 3,\r\n  700: 2,\r\n  500: 1\r\n};\r\n\r\nconst styles = {\r\n  galleryContainer: {\r\n    padding: '10px',\r\n    width: '100%',\r\n    maxWidth: '1200px',\r\n    margin: '0 auto',\r\n  },\r\n  imageWrapper: {\r\n    position: 'relative',\r\n    margin: '8px',\r\n    borderRadius: '8px',\r\n    overflow: 'hidden',\r\n    boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\r\n    transition: 'transform 0.2s ease-in-out',\r\n    '&:hover': {\r\n      transform: 'scale(1.01)',\r\n      boxShadow: '0 4px 12px rgba(0,0,0,0.15)'\r\n    },\r\n  },\r\n  image: {\r\n    width: '100%',\r\n    height: 'auto',\r\n    display: 'block',\r\n    borderRadius: '8px',\r\n  },\r\n  masonryGrid: {\r\n    display: 'flex',\r\n    marginLeft: '-8px',\r\n    width: 'auto',\r\n  },\r\n  masonryColumn: {\r\n    paddingLeft: '8px',\r\n    backgroundClip: 'padding-box',\r\n  },\r\n};\r\n\r\nconst ImageList = () => {\r\n  const [photos, setPhotos] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Source of image filenames (could be a prop or fetched from an API)\r\n  const imageFiles = ['1.jpg', '2.jpg', '3.jpg', '4.jpg', '5.jpg', '6.jpg', '7.jpg', '8.jpg'];\r\n\r\n  useEffect(() => {\r\n    const fetchImageDimensions = async () => {\r\n      setLoading(true);\r\n      const loadedPhotos = [];\r\n      let imagesProcessed = 0;\r\n\r\n      if (imageFiles.length === 0) {\r\n        setPhotos([]);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      imageFiles.forEach(filename => {\r\n        const img = new Image();\r\n        const src = `${process.env.PUBLIC_URL}/images/${filename}`;\r\n        img.src = src;\r\n\r\n        img.onload = () => {\r\n          loadedPhotos.push({\r\n            src: src,\r\n            width: img.naturalWidth,\r\n            height: img.naturalHeight,\r\n          });\r\n          imagesProcessed++;\r\n          if (imagesProcessed === imageFiles.length) {\r\n            setPhotos(loadedPhotos);\r\n            setLoading(false);\r\n          }\r\n        };\r\n\r\n        img.onerror = () => {\r\n          console.error(`Error loading image: ${filename}`);\r\n          imagesProcessed++;\r\n          // Optionally, add a placeholder or skip\r\n          if (imagesProcessed === imageFiles.length) {\r\n            setPhotos(loadedPhotos); // Still update state with successfully loaded images\r\n            setLoading(false);\r\n          }\r\n        };\r\n      });\r\n    };\r\n\r\n    fetchImageDimensions();\r\n  }, []); // Empty dependency array means this runs once on mount, as imageFiles is static here\r\n\r\n  if (loading) {\r\n    return <p>Loading images and dimensions...</p>;\r\n  }\r\n\r\n  if (photos.length === 0 && !loading) {\r\n    return <p>No images found or all images failed to load.</p>;\r\n  }\r\n\r\n  // 이미지의 종횡비를 고려한 스타일 계산\r\n  const getImageStyle = (width, height) => {\r\n    const aspectRatio = width / height;\r\n    return {\r\n      ...styles.image,\r\n      aspectRatio: aspectRatio,\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div style={styles.galleryContainer}>\r\n      <Masonry\r\n        breakpointCols={breakpointColumnsObj}\r\n        className=\"masonry-grid\"\r\n        columnClassName=\"masonry-grid_column\"\r\n        style={styles.masonryGrid}\r\n        columnAttrs={{\r\n          className: 'masonry-grid_column',\r\n          style: styles.masonryColumn,\r\n        }}\r\n      >\r\n        {photos.map((photo, index) => (\r\n          <div key={index} style={styles.imageWrapper}>\r\n            <img \r\n              src={photo.src} \r\n              alt={`Gallery item ${index + 1}`}\r\n              style={getImageStyle(photo.width, photo.height)}\r\n              loading=\"lazy\"\r\n            />\r\n          </div>\r\n        ))}\r\n      </Masonry>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default ImageList;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport ImageList from './components/ImageList'; // Import ImageList\r\n\r\nclass App extends Component {\r\n  state = {\r\n    // images: [], // Removed\r\n    // page: 1, // Removed\r\n    // loading: false, // Removed\r\n    // hasMore: true, // Removed\r\n  };\r\n\r\n  componentDidMount() {\r\n    // this.loadMoreImages(); // Removed\r\n    // window.addEventListener('scroll', this.handleScroll); // Removed\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // window.removeEventListener('scroll', this.handleScroll); // Removed\r\n  }\r\n\r\n  // handleScroll removed\r\n\r\n  // callApi removed\r\n\r\n  // loadMoreImages removed\r\n\r\n  render() {\r\n    // const { images } = this.state; // Removed\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1>Arin Gallery</h1>\r\n        </header>\r\n\r\n        <div className=\"content\">\r\n          <ImageList /> {/* Use ImageList component without props */}\r\n          {/* {loading && <p>Loading more images...</p>} // Removed */ }\r\n          {/* {!hasMore && <p>No more images to load.</p>} // Removed */ }\r\n        </div>\r\n        {/* content Div END */}\r\n        \r\n        {/* 회원가입 폼 (SignUp component usage removed) */}\r\n        {/* <hr/> // Also removing the hr for cleaner output\r\n        <div>\r\n            <SignUp/>\r\n        </div> */}\r\n        {/* 게시글 INSERT 폼 (BbsInsert component usage removed) */}\r\n        {/* <hr/> // Also removing the hr\r\n        <div>\r\n            <BbsInsert/>\r\n        </div> */}\r\n\r\n        <hr/> \r\n\r\n        <footer className=\"App-footer\">\r\n            <p>Copyright JYK94 2021.</p>\r\n        </footer>\r\n      </div>\r\n      // App Div END\r\n    );\r\n  } \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}